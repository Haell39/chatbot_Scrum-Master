# src/app.py

import streamlit as st
import os
from groq import Groq
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# --- 1. CONFIGURA√á√ÉO DO CLIENTE GROQ (Igual ao anterior) ---
try:
    client = Groq(api_key=os.getenv("GROQ_API_KEY"))
except Exception as e:
    st.error(f"Erro ao configurar o cliente Groq: {e}. Verifique sua chave de API no arquivo .env")
    st.stop()

# --- 2. DEFINI√á√ÉO DA PERSONA (Igual ao anterior) ---
instrucoes_scrum_master = """
Voc√™ √© o "ScrumBot 3000", um assistente de Scrum Master baseado em IA. Sua miss√£o √© ajudar um time de desenvolvimento √°gil a se manter no caminho certo, ser produtivo e melhorar continuamente. Voc√™ est√° em uma interface web agora. Seja conciso e use formata√ß√£o markdown para melhorar a legibilidade.

Suas principais responsabilidades s√£o:
1.  **Lembretes e Condu√ß√£o da Daily:** Inicie a conversa lembrando da Daily Stand-up e fazendo as tr√™s perguntas cl√°ssicas (O que voc√™ fez ontem? O que far√° hoje? H√° algum impedimento?).
2.  **Identifica√ß√£o de Impedimentos:** Preste muita aten√ß√£o a qualquer men√ß√£o de bloqueios, dificuldades ou depend√™ncias. Quando identificar um, pergunte mais detalhes e sugira os pr√≥ximos passos.
3.  **Feedback em User Stories:** Se um usu√°rio colar uma User Story, sua tarefa √© analis√°-la. Verifique se ela segue o formato "Como [persona], quero [funcionalidade], para [benef√≠cio]". Se n√£o, ajude a reescrev√™-la. Al√©m disso, sempre sugira de 2 a 4 Crit√©rios de Aceita√ß√£o (ACs).
4.  **Sugest√£o de Melhorias:** Com base na conversa, sugira proativamente melhorias para o processo do time.
5.  **Tom de Voz:** Seja sempre prestativo, positivo e direto ao ponto. Use emojis e markdown (negrito, listas) para deixar a comunica√ß√£o mais clara e amig√°vel. üöÄ
"""

# --- 3. L√ìGICA DA APLICA√á√ÉO STREAMLIT ---

# T√≠tulo da p√°gina
st.title("ü§ñ Chatbot Scrum Master")
st.caption("Um assistente de IA para ajudar seu time √°gil, powered by Groq & Streamlit")

# Inicializa o hist√≥rico da conversa na mem√≥ria da sess√£o se ele n√£o existir
if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "assistant",
            "content": "Ol√°, time! üëã Sou o ScrumBot 3000. Vamos come√ßar nossa Daily Stand-up? Me digam: o que voc√™s fizeram ontem, o que planejam para hoje e se h√° algum impedimento."
        }
    ]
    # Adiciona a instru√ß√£o do sistema sem mostr√°-la na tela
    st.session_state.full_history = [
        {"role": "system", "content": instrucoes_scrum_master},
        {"role": "assistant", "content": st.session_state.messages[0]['content']}
    ]

# Exibe as mensagens do hist√≥rico na interface
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Captura a entrada do usu√°rio com o campo de texto no final da p√°gina
if prompt := st.chat_input("Digite sua mensagem aqui..."):
    
    # Adiciona a mensagem do usu√°rio ao hist√≥rico vis√≠vel e ao completo
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.session_state.full_history.append({"role": "user", "content": prompt})
    
    # Exibe a mensagem do usu√°rio na interface
    with st.chat_message("user"):
        st.markdown(prompt)

    # Exibe uma anima√ß√£o de "pensando..." enquanto a resposta √© gerada
    with st.chat_message("assistant"):
        with st.spinner("Pensando..."):
            try:
                chat_completion = client.chat.completions.create(
                    model="llama3-8b-8192",
                    messages=st.session_state.full_history, # Usa o hist√≥rico completo
                    temperature=0.7,
                    max_tokens=1024,
                )
                response = chat_completion.choices[0].message.content
                
                # Exibe a resposta do assistente
                st.markdown(response)

                # Adiciona a resposta do assistente aos hist√≥ricos
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.session_state.full_history.append({"role": "assistant", "content": response})

            except Exception as e:
                st.error(f"Ocorreu um erro ao chamar a API: {e}")