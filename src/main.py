# src/main.py

import os
from groq import Groq
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env que est√° na raiz do projeto
# O dotenv √© inteligente e vai procurar o arquivo .env subindo os diret√≥rios
load_dotenv()

# --- 1. CONFIGURA√á√ÉO DO CLIENTE GROQ ---
try:
    # Inicializa o cliente da Groq usando a chave de API do arquivo .env
    client = Groq(
        api_key=os.getenv("GROQ_API_KEY"),
    )
    print("‚úÖ Cliente Groq configurado com sucesso!")
except Exception as e:
    print(f"‚ùå Erro ao configurar o cliente Groq: {e}")
    print("Verifique se a vari√°vel GROQ_API_KEY est√° correta no seu arquivo .env")
    exit()

# --- 2. DEFINI√á√ÉO DA PERSONA (PROMPT DE SISTEMA) ---
# Aqui definimos como a IA deve se comportar.
instrucoes_scrum_master = """
Voc√™ √© o "ScrumBot 3000", um assistente de Scrum Master baseado em IA. Sua miss√£o √© ajudar um time de desenvolvimento √°gil a se manter no caminho certo, ser produtivo e melhorar continuamente.

Suas principais responsabilidades s√£o:
1.  **Lembretes e Condu√ß√£o da Daily:** Inicie a conversa lembrando da Daily Stand-up e fazendo as tr√™s perguntas cl√°ssicas (O que voc√™ fez ontem? O que far√° hoje? H√° algum impedimento?).
2.  **Identifica√ß√£o de Impedimentos:** Preste muita aten√ß√£o a qualquer men√ß√£o de bloqueios, dificuldades ou depend√™ncias. Quando identificar um, pergunte mais detalhes e sugira os pr√≥ximos passos (ex: "Voc√™ j√° conversou com a pessoa X?", "Podemos marcar uma reuni√£o r√°pida sobre isso?").
3.  **Feedback em User Stories:** Se um usu√°rio colar uma User Story, sua tarefa √© analis√°-la. Verifique se ela segue o formato "Como [persona], quero [funcionalidade], para [benef√≠cio]". Se n√£o, ajude a reescrev√™-la. Al√©m disso, sempre sugira de 2 a 4 Crit√©rios de Aceita√ß√£o (ACs) para a hist√≥ria.
4.  **Sugest√£o de Melhorias:** Com base na conversa, sugira proativamente melhorias para o processo do time. (ex: "Notei que falamos muito sobre d√©bitos t√©cnicos. Que tal adicionarmos um item no pr√≥ximo backlog para endere√ßar isso?").
5.  **Tom de Voz:** Seja sempre prestativo, conciso, positivo e direto ao ponto. Use emojis para deixar a comunica√ß√£o mais leve e amig√°vel. üöÄ

Comece a conversa se apresentando e iniciando a Daily Stand-up.
"""

# --- 3. GERENCIAMENTO DO HIST√ìRICO DA CONVERSA ---
# A API da Groq √© "stateless", ou seja, n√£o lembra de chamadas anteriores.
# Por isso, guardamos o hist√≥rico em uma lista e a enviamos a cada nova pergunta.
historico_conversa = [
    {
        "role": "system",
        "content": instrucoes_scrum_master
    }
]

# --- 4. FUN√á√ÉO DE CHAMADA √Ä API ---
def obter_resposta_do_scrum_bot(prompt_usuario: str) -> str:
    """
    Envia o hist√≥rico e o novo prompt do usu√°rio para a API da Groq e retorna a resposta.
    """
    # Adiciona a mensagem do usu√°rio ao hist√≥rico
    historico_conversa.append({
        "role": "user",
        "content": prompt_usuario,
    })

    try:
        chat_completion = client.chat.completions.create(
            # Modelos dispon√≠veis na Groq: "llama3-8b-8192", "llama3-70b-8192", "mixtral-8x7b-32768", "gemma-7b-it"
            model="llama3-8b-8192", 
            messages=historico_conversa,
            temperature=0.7,
            max_tokens=1024,
        )
        
        resposta = chat_completion.choices[0].message.content
        
        # Adiciona a resposta do assistente ao hist√≥rico para manter o contexto na pr√≥xima chamada
        historico_conversa.append({
            "role": "assistant",
            "content": resposta
        })
        
        return resposta

    except Exception as e:
        return f"‚ùå Ocorreu um erro ao chamar a API da Groq: {e}"

# --- 5. FUN√á√ÉO PRINCIPAL (LOOP DO CHAT) ---
def main():
    """Fun√ß√£o principal que executa o loop do chatbot."""
    print("\nü§ñ ScrumBot 3000 (vers√£o Groq) est√° pronto para come√ßar!")
    print("   Digite 'sair' a qualquer momento para encerrar.")
    
    # Mensagem inicial para a IA se apresentar e come√ßar a daily
    resposta_inicial = obter_resposta_do_scrum_bot("Ol√°, time! Acabei de ser ativado. Por favor, comece a conversa.")
    print(f"\nü§ñ ScrumBot 3000: {resposta_inicial}")

    while True:
        prompt_usuario = input("üôã Voc√™: ")
        
        if prompt_usuario.lower() in ["sair", "exit", "quit"]:
            print("\nü§ñ ScrumBot 3000: √ìtimo trabalho, time! Encerrando por agora. At√© a pr√≥xima! üëã")
            break
            
        resposta = obter_resposta_do_scrum_bot(prompt_usuario)
        print(f"\nü§ñ ScrumBot 3000: {resposta}")

# --- PONTO DE ENTRADA DO SCRIPT ---
if __name__ == "__main__":
    main()